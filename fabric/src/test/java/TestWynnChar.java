/*
 * Copyright © Wynntils 2025.
 * This file is released under LGPLv3. See LICENSE for full license details.
 */
import com.wynntils.models.wynnfont.WynnCharModel;
import net.minecraft.SharedConstants;
import net.minecraft.server.Bootstrap;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

public class TestWynnChar {
    private final WynnCharModel wynnCharModel = new WynnCharModel();

    @BeforeAll
    public static void setup() {
        SharedConstants.tryDetectVersion();
        Bootstrap.bootStrap();
    }

    @Test
    public void convertFromWynnFont() {
        String original =
                "§f\\uE044\\uE054\\uE061\\uE064 §8\\uE010\u2064\\uE00F§f\\uE012\\uE063§8\\uE00F§f\\uE012\\uE063§8\\uE00E§f\\uE012\u2064\u2064\\uE02E§8\\uE00F§f\\uE012\\uE045§8\\uE00F§f\\uE012\\uE04D§8\\uE00F§f\\uE012\\uE044§8\\uE011\u2064§r §#a0c84bff\\uE089 \u2064§r\\uE017\\uE013\u2064\u2064§#e8c00cff§omagicus: §ftest";
        String championSequence = "\uE017";

        String decodedChampion = wynnCharModel.decodeWynnChars(championSequence, "default");
        Assertions.assertEquals("§({champion})", decodedChampion);

        String championUnicode = "";
        String decodedUnicode = wynnCharModel.decodeWynnChars(championSequence, "default");
        Assertions.assertEquals("§({champion})", decodedUnicode);

        String championTwice = "\uE017\uE017";
        String decodedTwice = wynnCharModel.decodeWynnChars(championTwice, "default");
        Assertions.assertEquals("§({champion}{champion})", decodedTwice);

        String championThrice = "a\uE017b\uE017\uE017c";
        String decodedThrice = wynnCharModel.decodeWynnChars(championThrice, "default");
        Assertions.assertEquals("a§({champion})b§({champion}{champion})c", decodedThrice);

        String text1 = "\uE044\uE054\uE068";
        String decoded1 = wynnCharModel.decodeWynnChars(text1, "default");
        Assertions.assertEquals("§(EU8)", decoded1);

        String text2 = "\uE040\uE054\uE068";
        String decoded2 = wynnCharModel.decodeWynnChars(text2, "default");
        Assertions.assertEquals("§(AU8)", decoded2);

        String text3 = "\uE040\uE054\uE069";
        String decoded3 = wynnCharModel.decodeWynnChars(text3, "default");
        Assertions.assertEquals("§(AU9)", decoded3);

        String text4 = "\uE026";
        String decoded4 = wynnCharModel.decodeWynnChars(text4, "default");
        Assertions.assertEquals("§(+)", decoded4);

        String text5 = "\uE040\uE026\uE017\uE040xx";
        String decoded5 = wynnCharModel.decodeWynnChars(text5, "default");
        Assertions.assertEquals("§(A+{champion}A)xx", decoded5);

        String text6 = "\uE084\uE094\uE068";
        String decoded6 = wynnCharModel.decodeWynnChars(text6, "default");
        Assertions.assertEquals("§({bg_E}{bg_U}8)", decoded6);
    }

    @Test
    public void convertToWynnFont() {
        String text1 = "§(A+{champion}A)xx";
        String encoded1 = wynnCharModel.encodeWynnChars(text1, "default");
        Assertions.assertEquals("\uE040\uE026\uE017\uE040xx", encoded1);

        String text2 = "x§({bg_E}{bg_U}8)";
        String encoded2 = wynnCharModel.encodeWynnChars(text2, "default");
        Assertions.assertEquals("x\uE084\uE094\uE068", encoded2);

        String text3 = "x§({bg_E}{bg_U}8)A§(A)";
        String encoded3 = wynnCharModel.encodeWynnChars(text3, "default");
        Assertions.assertEquals("x\uE084\uE094\uE068A\uE040", encoded3);

        String dummy = "abc";
        String encodedDummy = wynnCharModel.encodeWynnChars(dummy, "default");
        Assertions.assertEquals("abc", encodedDummy);

        // Tests generated by AI:
        // basic range mapping: A/Z, 0/9, bg_A/bg_Z
        String t1 = "§({bg_A}{bg_Z}A0)";
        String e1 = wynnCharModel.encodeWynnChars(t1, "default");
        Assertions.assertEquals("\uE080\uE099\uE040\uE060", e1);

        // mixed with plain text around segments
        String t2 = "x§({bg_E}{bg_U}8)A§(A)";
        String e2 = wynnCharModel.encodeWynnChars(t2, "default");
        Assertions.assertEquals("x\uE084\uE094\uE068A\uE040", e2);

        // direct mapped tokens: {champion} and '+'
        String t3 = "§({champion}+)";
        String e3 = wynnCharModel.encodeWynnChars(t3, "default");
        Assertions.assertEquals("\uE017\uE026", e3);

        // two segments back-to-back
        String t4 = "§({bg_E})§({bg_U})";
        String e4 = wynnCharModel.encodeWynnChars(t4, "default");
        Assertions.assertEquals("\uE084\uE094", e4);

        // unknown tokens inside a segment → skipped
        String t5 = "pre§({nope}!?)post";
        String e5 = wynnCharModel.encodeWynnChars(t5, "default");
        Assertions.assertEquals("prepost", e5);

        // unterminated segment → left as-is (regex doesn’t match)
        String t6 = "L§(A R";
        String e6 = wynnCharModel.encodeWynnChars(t6, "default");
        Assertions.assertEquals("L§(A R", e6);

        // unterminated brace inside a valid segment: {bg_A}{oopsA) → bg_A encodes, stray 'A' encodes, others dropped
        String t7 = "§({bg_A}{oopsA)";
        String e7 = wynnCharModel.encodeWynnChars(t7, "default");
        Assertions.assertEquals("\uE080\uE040", e7);

        // empty segment → no output
        String t8 = "a§()b";
        String e8 = wynnCharModel.encodeWynnChars(t8, "default");
        Assertions.assertEquals("ab", e8);

        // lowercase not mapped → skipped
        String t9 = "§(abcXYZ012)";
        String e9 = wynnCharModel.encodeWynnChars(t9, "default");
        Assertions.assertEquals("\uE057\uE058\uE059\uE060\uE061\uE062", e9); // X Y Z 0 1 2

        // plain non-ASCII outside segment is preserved
        String t10 = "Ω§(A)ω";
        String e10 = wynnCharModel.encodeWynnChars(t10, "default");
        Assertions.assertEquals("Ω\uE040ω", e10);

        // boundary digits
        String t11 = "§(09)";
        String e11 = wynnCharModel.encodeWynnChars(t11, "default");
        Assertions.assertEquals("\uE060\uE069", e11);

        // mixed: mapped + unknown + mapped
        String t12 = "§({champion}-{bg_A})";
        String e12 = wynnCharModel.encodeWynnChars(t12, "default");
        Assertions.assertEquals("\uE017\uE080", e12); // '-' unknown → dropped
    }

    @Test
    public void testWrapper() {
        String s1 = "\uE017\uE018a";
        String d1 = wynnCharModel.decodeWynnChars(s1, "default-wrapped");
        Assertions.assertEquals("§({champion}{+E018})a", d1);
    }
}