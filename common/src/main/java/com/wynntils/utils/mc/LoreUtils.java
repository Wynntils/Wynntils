/*
 * Copyright Â© Wynntils 2021-2024.
 * This file is released under LGPLv3. See LICENSE for full license details.
 */
package com.wynntils.utils.mc;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.JsonSyntaxException;
import com.wynntils.core.text.StyledText;
import com.wynntils.utils.StringUtils;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import net.minecraft.ChatFormatting;
import net.minecraft.core.component.DataComponents;
import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.network.chat.Component;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.TooltipFlag;
import net.minecraft.world.item.component.ItemLore;

public final class LoreUtils {
    /**
     * Returns the lore for the given itemStack as a list of {@link StyledText}.
     *
     * @return A list of {@link StyledText} representing the lore of the itemStack.
     */
    public static LinkedList<StyledText> getLore(ItemStack itemStack) {
        List<Component> lines =
                itemStack.getOrDefault(DataComponents.LORE, ItemLore.EMPTY).lines();
        return lines.stream()
                .map(StyledText::fromComponent)
                .collect(LinkedList::new, LinkedList::add, LinkedList::addAll);
    }

    /**
     * Check if the lore matches the given pattern, starting at the given line
     * and checking 5 more lines. (The reason for this is that the Trade Market
     * inserts additional lines at the top of the lore.)
     */
    public static Matcher matchLoreLine(ItemStack itemStack, int startLineNum, Pattern pattern) {
        LinkedList<StyledText> lore = getLore(itemStack);

        Matcher matcher = StyledText.EMPTY.getMatcher(pattern);
        for (int i = startLineNum; i < Math.min(startLineNum + 6, lore.size()); i++) {
            StyledText line = lore.get(i);
            matcher = pattern.matcher(line.getString());
            if (matcher.matches()) {
                break;
            }
        }

        // Return the last non-matching matcher
        return matcher;
    }

    /**
     * Concatenates the lore of the given itemStack into a single StyledText.
     * To get the raw string, use {@link StyledText#getString()}.
     */
    public static StyledText getStringLore(ItemStack itemStack) {
        return StyledText.concat(getLore(itemStack));
    }

    public static List<Component> getTooltipLines(ItemStack itemStack) {
        TooltipFlag flag = McUtils.options().advancedItemTooltips ? TooltipFlag.ADVANCED : TooltipFlag.NORMAL;
        return itemStack.getTooltipLines(Item.TooltipContext.of(McUtils.mc().level), McUtils.player(), flag);
    }

    public static List<Component> appendTooltip(
            ItemStack itemStack, List<Component> baseTooltip, List<Component> tooltipAddon) {
        if (McUtils.options().advancedItemTooltips) {
            // Check for advanced tooltip lines
            int advancedStartLine = getAdvancedStartLine(baseTooltip, itemStack);

            if (advancedStartLine != -1) {
                // We know where to inject our addon, so let's do it
                List<Component> newTooltip = new ArrayList<>();
                for (int i = 0; i < baseTooltip.size(); i++) {
                    if (i == advancedStartLine) {
                        newTooltip.addAll(tooltipAddon);
                    }
                    newTooltip.add(baseTooltip.get(i));
                }
                return newTooltip;
            }

            // Otherwise we failed to locate the advanced lines, fall through to below
        }

        // Otherwise we can just add it to the end
        List<Component> newTooltip = new ArrayList<>(baseTooltip);
        newTooltip.addAll(tooltipAddon);
        return newTooltip;
    }

    private static int getAdvancedStartLine(List<Component> baseTooltip, ItemStack itemStack) {
        // These are lines as generated by vanilla if you have advanced tooltips on
        Component typeLine = Component.literal(
                        BuiltInRegistries.ITEM.getKey(itemStack.getItem()).toString())
                .withStyle(ChatFormatting.DARK_GRAY);
        Component damagedLine = Component.translatable(
                "item.durability", itemStack.getMaxDamage() - itemStack.getDamageValue(), itemStack.getMaxDamage());

        int advancedStartLine = -1;

        // If we have advanced tooltip lines, they are at the bottom 3 lines
        for (int i = baseTooltip.size() - 1; i >= Math.max(0, baseTooltip.size() - 4); i--) {
            Component line = baseTooltip.get(i);
            if (line.equals(typeLine)) {
                advancedStartLine = i;
                break;
            }
        }
        if (advancedStartLine > 1) {
            // The damage line is optional, but precedes the item type line if present
            if (baseTooltip.get(advancedStartLine - 1).equals(damagedLine)) {
                advancedStartLine--;
            }
        }
        return advancedStartLine;
    }

    /**
     * This is used to extract the lore from an ingame item that is held by another player.
     * This lore has a completely different format from the normal lore shown to the player
     */
    public static JsonObject getJsonFromIngameLore(ItemStack itemStack) {
        String rawLore = StringUtils.substringBeforeLast(
                        getStringLore(itemStack).getString(), "}") + "}"; // remove extra unnecessary info
        try {
            return JsonParser.parseString(rawLore).getAsJsonObject();
        } catch (JsonSyntaxException e) {
            return new JsonObject(); // invalid or empty itemData on item
        }
    }
}
