name: Publish Beta Release

on:
  push:
    branches:
      - beta
    paths:
      - 'CHANGELOG.md'

jobs:
  set-version:
    name: Set Version
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.version.outputs.tag }}
      skipped: ${{ steps.version.outputs.skipped }}
      changelog: ${{ steps.version.outputs.changelog }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PRIVATE_TOKEN }}

      - uses: actions/setup-node@v4
        with:
          node-version: 16
      - run: |
          npm install conventional-changelog-conventionalcommits@7.0.2
          npm install conventional-recommended-bump@9.0.0

      - name: Set up version.json
        run: echo "{"version":$(git describe --tags --abbrev=0)}" > version.json

      - name: Generate version tag
        id: version
        uses: TriPSs/conventional-changelog-action@v6
        with:
          github-token: ${{ secrets.PRIVATE_TOKEN }}
          git-user-name: 'WynntilsBot'
          git-user-email: 'admin@wynntils.com'
          pre-commit: ./.github/.pre-commit.js
          config-file-path: ./.github/.config.js
          version-file: ./version.json
          skip-version-file: true
          skip-git-pull: true
          pre-release: true
          pre-release-identifier: beta
          release-count: 5
          output-file: false

      - name: Upload version information
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: build.gradle
          overwrite: true

  build:
    name: Build
    needs: [ set-version ] # Build needs the new version number
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache Gradle data
        uses: actions/cache@v4
        with:
          path: .gradle
          key: ${{ runner.os }}-gradle--${{ hashFiles('**/settings.gradle', '**/gradle.properties') }}

      - uses: actions/download-artifact@v4 # Download version information from changelog
        with:
          name: build

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: 21
          cache: "gradle"

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build with Gradle
        run: ./gradlew buildDependents -x spotlessCheck -x test

      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: |
            **/build/libs/*-fabric+MC-*.jar
            **/build/libs/*-neoforge+MC-*.jar
          if-no-files-found: error
          overwrite: true

  release-github:
    name: Release to Github
    if: ${{ needs.changelog.outputs.skipped != 'true' }}
    runs-on: ubuntu-latest
    needs: [ build, set-version ]
    steps:
      - name: Checkout beta branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PRIVATE_TOKEN }}
          ref: beta

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build

      - name: Get previous and current versions
        id: versions
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^)
          echo "previous=$PREV_TAG" >> $GITHUB_OUTPUT
          echo "current=${{ needs.set-version.outputs.tag }}" >> $GITHUB_OUTPUT

      - name: Get current date
        id: date
        run: |
          echo "today=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "long=$(date +'%Y-%m-%d %H:%M')" >> $GITHUB_OUTPUT

      - name: Build GitHub release body
        id: build_release_body
        run: |
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "## [${{ steps.versions.outputs.current }}](https://github.com/Wynntils/Wynntils/compare/${{ steps.versions.outputs.previous }}...${{ steps.versions.outputs.current }}) (${{ steps.date.outputs.today }})" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.PRIVATE_TOKEN }}
          tag_name: ${{ needs.set-version.outputs.tag }}
          body: ${{ steps.build_release_body.outputs.content }}
          draft: false
          prerelease: true
          files: |
            **/build/libs/*-fabric+MC-*.jar
            **/build/libs/*-neoforge+MC-*.jar

      - name: Generate artifact links
        id: artifact_links
        run: |
          TAG=${{ needs.set-version.outputs.tag }}
          BASE_URL="https://github.com/Wynntils/Wynntils/releases/download/$TAG"

          FILES=$(find . -path "*/build/libs/*-fabric+MC-*.jar" -or -path "*/build/libs/*-neoforge+MC-*.jar")

          {
            echo "links<<EOF"
            for f in $FILES; do
              NAME=$(basename "$f")
              URL="$BASE_URL/${NAME//+/%2B}"
              echo "- [$NAME]($URL)"
            done
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Post release on Discord
        uses: tsickert/discord-webhook@v6.0.0
        with:
          webhook-url: ${{ secrets.DISCORD_RELEASE_WEBHOOK_URL }}
          embed-color: "9498256"
          embed-title: ${{ format('Wynntils {0}', needs.set-version.outputs.tag) }}
          embed-url: https://github.com/Wynntils/Wynntils/releases/tag/${{ needs.set-version.outputs.tag }}
          embed-description: |
            ## [${{ steps.versions.outputs.current }}](https://github.com/Wynntils/Wynntils/compare/${{ steps.versions.outputs.previous }}...${{ steps.versions.outputs.current }}) (${{ steps.date.outputs.today }})
            
            **Download Links**
            ${{ steps.artifact_links.outputs.links }}
          embed-timestamp: ${{ steps.date.outputs.long }}

      - name: Post changelog on Discord
        env:
          WEBHOOK_URL: ${{ secrets.DISCORD_RELEASE_NOTES_WEBHOOK_URL }}
        run: |
          VERSION="${{ needs.set-version.outputs.tag }}"
          TITLE="# Wynntils ${VERSION} Changelog"

          # Combine title and changelog with proper newlines
          FULL_CHANGELOG="$TITLE"$'\n\n'"$(cat CHANGELOG.md)"

          # Function to post each chunk
          post_chunk() {
            jq -Rs '{content: .}' <<< "$1" | \
              curl -s -X POST -H "Content-Type: application/json" \
              -d @- "$WEBHOOK_URL"
          }

          # Split changelog by newline into array
          mapfile -t lines <<< "$FULL_CHANGELOG"

          chunk=""
          chunk_bytes=0
          max_bytes=1900

          for line in "${lines[@]}"; do
            # +1 for newline character
            line_bytes=$(printf "%s\n" "$line" | wc -c)

            if (( chunk_bytes + line_bytes > max_bytes )); then
              post_chunk "$chunk"
              chunk=""
              chunk_bytes=0
            fi

            chunk+=$'\n'"$line"
            ((chunk_bytes += line_bytes))
          done

          # Post final chunk if exists
          if [[ -n "$chunk" ]]; then
            post_chunk "$chunk"
          fi
